<!-- Content -->

<div class="row gy-4">
  <!-- Transactions -->
  <div class="col-lg-12">
    <div class="card">
      <div class="card-header">
        <div class="d-flex align-items-center justify-content-between">
          <h5 class="card-title m-0 me-2">
            Overall
          </h5>
        </div>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-3 col-6">
            <div class="d-flex align-items-center">
              <div class="avatar">
                <div class="avatar-initial bg-primary rounded shadow">
                  <i class="fa-solid fa-book"></i>
                </div>
              </div>
              <div class="ms-3">
                <div class="small mb-1">
                  Categories
                </div>
                <h5 class="mb-0">
                  {{totalCategories}}
                </h5>
              </div>
            </div>
          </div>
          <div class="col-md-3 col-6">
            <div class="d-flex align-items-center">
              <div class="avatar">
                <div class="avatar-initial bg-warning rounded shadow">
                  <i class="fa-solid fa-book"></i>
                </div>
              </div>
              <div class="ms-3">
                <div class="small mb-1">
                  Books
                </div>
                <h5 class="mb-0">
                  {{totalBooks}}
                </h5>
              </div>
            </div>
          </div>
          <div class="col-md-3 col-6">
            <div class="d-flex align-items-center">
              <div class="avatar">
                <div class="avatar-initial bg-success rounded shadow">
                  <i class="fa-solid fa-users"></i>
                </div>
              </div>
              <div class="ms-3">
                <div class="small mb-1">
                  Customers
                </div>
                <h5 class="mb-0">
                  {{totalCustomers}}
                </h5>
              </div>
            </div>
          </div>
          <div class="col-md-3 col-6">
            <div class="d-flex align-items-center">
              <div class="avatar">
                <div class="avatar-initial bg-info rounded shadow">
                  <i class="fa-solid fa-dollar-sign"></i>
                </div>
              </div>
              <div class="ms-3">
                <div class="small mb-1">
                  Revenue
                </div>
                <h5 class="mb-0">
                  ${{totalRevenue}}
                </h5>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!--/ Transactions -->

  <!-- Completed Orders -->
  <div class="col-xl-6 col-md-6">
    <div class="card">
      <div class="card-header d-flex align-items-center justify-content-between pb-0">
        <h5 class="card-title m-0 me-2">
          Total Orders
        </h5>
      </div>
      <div class="card-body">
        <div class="my-0">
          <div class="d-flex align-items-center flex-column">
            <h2 class="my-2 fs-1" style="color: var(--palette-02)">
              {{totalOrders}}
            </h2>
            {{!-- Revenue line chart --}}
            <canvas id="ordersChart" width="400" height="200">
              <input type="hidden" id="listRevenue">
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!--/ Completed Orders -->
  <!-- Total Earnings -->
  <div class="col-xl-6 col-md-6">
    <div class="card">
      <div class="card-header d-flex align-items-center justify-content-between pb-0">
        <h5 class="card-title m-0 me-2">
          Total Earning
        </h5>
      </div>
      <div class="card-body">
        <div class="my-0">
          <div class="d-flex align-items-center flex-column">
            <h2 class="my-2 fs-1" style="color: var(--palette-02)">
              ${{totalRevenue}}
            </h2>
            {{!-- Revenue line chart --}}
            <canvas id="revenueChart" width="400" height="200">
              <input type="hidden" id="listRevenue">
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!--/ Total Earnings -->

  <!-- Subscribers -->
  <div class="col-xl-6 col-md-6">
    <div class="card">
      <div class="card-header d-flex align-items-center justify-content-between pb-0">
        <h5 class="card-title m-0 me-2">
          Subscribers
        </h5>
      </div>
      <div class="card-body">
        <div class="my-0">
          <div class="d-flex align-items-center flex-column">
            <h2 class="my-2 fs-1" style="color: var(--palette-02)">
              {{totalSubscribers}}
            </h2>
            <canvas id="subscriptionChart" width="400" height="200">
              <input type="hidden" value="{{subscribers}}" id="listSubscribers">
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!--/ Subscribers -->

  <!-- Log In -->
  <div class="col-xl-6 col-md-6">
    <div class="card h-100">
      <div class="card-header d-flex align-items-center justify-content-between pb-0">
        <h5 class="card-title m-0 me-2">
          Log In Times
        </h5>
      </div>
      <div class="card-body h-100">
        <div class="my-0 h-100">
          <div class="d-flex h-100 align-items-center justify-content-end flex-column">
            <canvas id="loginsChart" width="400" height="200">
              <input type="hidden" value="{{subscribers}}" id="listLogins">
            </canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<!-- / Content -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const success_str = '{{#if success}}{{success}}{{/if}}';
    const success = "{{success}}"
    if (success === "true") {
      toastr.success(success_str);
    }
    const fetchOrders = () => {
      return $.ajax({
        url: '/admin/orders',
        method: 'GET',
        dataType: 'json'
      });
    };
    const fetchSubscribers = () => {
      return $.ajax({
        url: '/subscribers/getAll',
        method: 'GET',
        dataType: 'json'
      });
    };

    const fetchLogins = () => {
      return $.ajax({
        url: '/logins/getAll',
        method: 'GET',
        dataType: 'json'
      });
    };

    const fetchRevenue = () => {
      return $.ajax({
        url: '/admin/revenue',
        method: 'GET',
        dataType: 'json'
      });
    };

    fetchLogins()
      .then(function (data) {
        // Process the received data
        const dateCounts = {};
        data.forEach(log => {
          const date = new Date(log.time_login).toLocaleDateString();
          if (!dateCounts[date]) {
            dateCounts[date] = 0;
          }
          dateCounts[date]++;
        });

        const dates = Object.keys(dateCounts);
        const loginsCount = Object.values(dateCounts);

        // Get the canvas element where the chart will be rendered
        const ctx = document.getElementById('loginsChart').getContext('2d');

        // Create the chart
        const loginsChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: 'Logins',
              data: loginsCount,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 3
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      })
      .fail(function (xhr, textStatus, errorThrown) {
        console.error('There was a problem with the fetch operation:', errorThrown);
      });

    fetchRevenue()
      .then(function (data) {
        // Process the received data
        const revenueCounts = {};
        data.forEach(log => {
          const ngay = new Date(log.date);
          const dd = String(ngay.getDate()).padStart(2, '0');
          const mm = String(ngay.getMonth() + 1).padStart(2, '0');
          const yyyy = ngay.getFullYear();
          const date = `${dd}/${mm}/${yyyy}`

          if (!revenueCounts[date]) {
            revenueCounts[date] = 0;
          }
          revenueCounts[date] += log.amount;
        });

        const dates = Object.keys(revenueCounts);
        const revenueCount = Object.values(revenueCounts);

        // Get the canvas element where the chart will be rendered
        const ctx = document.getElementById('revenueChart').getContext('2d');

        // Create the chart
        const revenueChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: 'Revenue',
              data: revenueCount,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 3
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      })
      .fail(function (xhr, textStatus, errorThrown) {
        console.error('There was a problem with the fetch operation:', errorThrown);
      });

    fetchSubscribers()
      .then(function (data) {
        console.log(data)
        // Process the received data
        const dateCounts = {};
        data.forEach(subscriber => {
          const date = new Date(subscriber.created_at).toLocaleDateString();
          if (!dateCounts[date]) {
            dateCounts[date] = 0;
          }
          dateCounts[date]++;
        });

        const dates = Object.keys(dateCounts);
        const subscribersCount = Object.values(dateCounts);

        // Get the canvas element where the chart will be rendered
        const ctx = document.getElementById('subscriptionChart').getContext('2d');

        // Create the chart
        const subscriptionChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: 'Subscribers',
              data: subscribersCount,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 3
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      })
      .fail(function (xhr, textStatus, errorThrown) {
        console.error('There was a problem with the fetch operation:', errorThrown);
      });
    fetchOrders()
      .then(function (data) {
        // Process the received data
        const orderCounts = {};
        console.log(data);
        data.forEach(log => {
          const ngay = new Date(log.created_at);
          const dd = String(ngay.getDate()).padStart(2, '0');
          const mm = String(ngay.getMonth() + 1).padStart(2, '0');
          const yyyy = ngay.getFullYear();
          const date = `${dd}/${mm}/${yyyy}`

          if (!orderCounts[date]) {
            orderCounts[date] = 0;
          }
          orderCounts[date] += 1;
        });

        const dates = Object.keys(orderCounts);
        const orderCount = Object.values(orderCounts);

        // Get the canvas element where the chart will be rendered
        const ctx = document.getElementById('ordersChart').getContext('2d');

        // Create the chart
        const ordersChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: 'Order',
              data: orderCount,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 3
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      })
      .fail(function (xhr, textStatus, errorThrown) {
        console.error('There was a problem with the fetch operation:', errorThrown);
      });
  });
</script>